{
  "openapi": "3.0.0",
  "info": {
    "title": "HTTPlex API",
    "version": "1.0.0",
    "description": "A simple HTTP Request & Response Service."
  },
  "tags": [
    {
      "name": "Hello World",
      "description": "Basic hello world endpoint"
    },
    {
      "name": "HTTP Methods",
      "description": "Endpoints demonstrating various HTTP methods"
    },
    {
      "name": "Request inspection",
      "description": "Endpoints for inspecting request details"
    },
    {
      "name": "Status codes",
      "description": "Endpoints returning specific status codes"
    },
    {
      "name": "Dynamic data",
      "description": "Endpoints generating dynamic data"
    },
    {
      "name": "Cookies",
      "description": "Endpoints for cookie manipulation"
    },
    {
      "name": "Images",
      "description": "Endpoints serving various image formats"
    },
    {
      "name": "Redirects",
      "description": "Endpoints demonstrating redirects"
    },
    {
      "name": "Auth",
      "description": "Authentication-related endpoints"
    },
    {
      "name": "Caching",
      "description": "Endpoints demonstrating caching mechanisms"
    },
    {
      "name": "Response inspection",
      "description": "Endpoints for inspecting response details"
    },
    {
      "name": "Response formats",
      "description": "Endpoints returning responses in different formats"
    },
    {
      "name": "Encoding",
      "description": "Endpoints demonstrating various encoding methods"
    },
    {
      "name": "Anything",
      "description": "Endpoints that return anything passed in the request"
    }
  ],
  "paths": {
    "/hello": {
      "get": {
        "summary": "Home",
        "description": "Returns the homepage.",
        "tags": [
          "Hello World"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/get": {
      "get": {
        "summary": "GET Request",
        "description": "Returns GET data.",
        "tags": [
          "HTTP Methods"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/post": {
      "post": {
        "summary": "POST Request",
        "description": "Returns POST data.",
        "tags": [
          "HTTP Methods"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/put": {
      "put": {
        "summary": "PUT Request",
        "description": "Returns PUT data.",
        "tags": [
          "HTTP Methods"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/patch": {
      "patch": {
        "summary": "PATCH Request",
        "description": "Returns PATCH data.",
        "tags": [
          "HTTP Methods"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/delete": {
      "delete": {
        "summary": "DELETE Request",
        "description": "Returns DELETE data.",
        "tags": [
          "HTTP Methods"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/status/{code}": {
      "get": {
        "summary": "Status Code",
        "description": "Returns a response with the specified status code.",
        "tags": [
          "Status codes"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Response with specified status code"
          }
        }
      }
    },
    "/ip": {
      "get": {
        "summary": "Client IP",
        "description": "Returns the client's IP address.",
        "tags": [
          "Request inspection"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "origin": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user-agent": {
      "get": {
        "summary": "User Agent",
        "description": "Returns the user agent.",
        "tags": [
          "Request inspection"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user-agent": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/headers": {
      "get": {
        "summary": "Headers",
        "description": "Returns the request headers.",
        "tags": [
          "Request inspection"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/delay/{delay}": {
      "get": {
        "summary": "Delayed response",
        "description": "Returns a delayed response (max of 10 seconds).",
        "tags": [
          "Dynamic data"
        ],
        "parameters": [
          {
            "name": "delay",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number",
              "format": "float"
            },
            "description": "Delay in seconds"
          }
        ],
        "responses": {
          "200": {
            "description": "Delayed response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "delay": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "$ref": "#/paths/~1delay~1{delay}/get",
        "tags": [
          "Dynamic data"
        ],
      },
      "put": {
        "$ref": "#/paths/~1delay~1{delay}/get",
        "tags": [
          "Dynamic data"
        ],
      },
      "patch": {
        "$ref": "#/paths/~1delay~1{delay}/get",
        "tags": [
          "Dynamic data"
        ],
      },
      "delete": {
        "$ref": "#/paths/~1delay~1{delay}/get",
        "tags": [
          "Dynamic data"
        ],
      }
    },
    "/drip": {
      "get": {
        "summary": "Drip data",
        "description": "Drips data over a duration after an optional initial delay.",
        "tags": [
          "Dynamic data"
        ],
        "parameters": [
          {
            "name": "duration",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 2
            },
            "description": "The amount of time (in seconds) over which to drip the data"
          },
          {
            "name": "numbytes",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "The number of bytes to respond with"
          },
          {
            "name": "delay",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 2
            },
            "description": "The amount of time (in seconds) to delay before starting to drip"
          }
        ],
        "responses": {
          "200": {
            "description": "Dripped data",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/links/{n}/{offset}": {
      "get": {
        "summary": "Generate links",
        "description": "Generate a page containing n links to other pages which do the same.",
        "tags": [
          "Dynamic data"
        ],
        "parameters": [
          {
            "name": "n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Number of links to generate"
          },
          {
            "name": "offset",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Offset for link numbering"
          }
        ],
        "responses": {
          "200": {
            "description": "HTML page with links",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/range/{numbytes}": {
      "get": {
        "summary": "Bytes range",
        "description": "Streams n random bytes generated with given seed, at given chunk size per packet.",
        "tags": [
          "Dynamic data"
        ],
        "parameters": [
          {
            "name": "numbytes",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Number of bytes to return"
          }
        ],
        "responses": {
          "200": {
            "description": "Random bytes",
            "headers": {
              "Content-Range": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/stream-bytes/{n}": {
      "get": {
        "summary": "Stream bytes",
        "description": "Streams n random bytes generated with given seed, at given chunk size per packet.",
        "tags": [
          "Dynamic data"
        ],
        "parameters": [
          {
            "name": "n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Number of bytes to stream"
          }
        ],
        "responses": {
          "200": {
            "description": "Streamed random bytes",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/stream/{n}": {
      "get": {
        "summary": "Stream JSON",
        "description": "Stream n JSON responses",
        "tags": [
          "Dynamic data"
        ],
        "parameters": [
          {
            "name": "n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Number of JSON objects to stream"
          }
        ],
        "responses": {
          "200": {
            "description": "Streamed JSON objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/uuid": {
      "get": {
        "summary": "UUID",
        "description": "Return a UUID4.",
        "tags": [
          "Dynamic data"
        ],
        "responses": {
          "200": {
            "description": "UUID4",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cookies": {
      "get": {
        "summary": "Get cookies",
        "description": "Returns cookie data.",
        "tags": [
          "Cookies"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cookies/delete": {
      "get": {
        "summary": "Delete cookies",
        "description": "Deletes cookie(s) as provided by the query string and redirects to cookie list.",
        "tags": [
          "Cookies"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cookieName",
            "schema": {
              "type": "string"
            },
            "description": "Name of the cookie to delete. Can be repeated for multiple cookies.",
            "required": false
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to cookie list",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/cookies/set": {
      "get": {
        "summary": "Set cookies",
        "description": "Sets cookie(s) as provided by the query string and redirects to cookie list.",
        "tags": [
          "Cookies"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cookieName",
            "schema": {
              "type": "string"
            },
            "description": "Name and value of the cookie to set. Can be repeated for multiple cookies.",
            "required": false
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to cookie list",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/cookies/set/{name}/{value}": {
      "get": {
        "summary": "Set a cookie",
        "description": "Sets a cookie and redirects to cookie list.",
        "tags": [
          "Cookies"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name of the cookie to set"
          },
          {
            "in": "path",
            "name": "value",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Value of the cookie to set"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to cookie list",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/image": {
      "get": {
        "summary": "Get Image",
        "description": "Returns an image based on the Accept header.",
        "tags": [
          "Images"
        ],
        "responses": {
          "200": {
            "description": "An image",
            "content": {
              "image/png": {},
              "image/jpeg": {},
              "image/webp": {}
            }
          }
        }
      }
    },
    "/image/png": {
      "get": {
        "summary": "PNG Image",
        "description": "Returns a PNG image.",
        "tags": [
          "Images"
        ],
        "responses": {
          "200": {
            "description": "A PNG image",
            "content": {
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/image/jpeg": {
      "get": {
        "summary": "JPEG Image",
        "description": "Returns a JPEG image.",
        "tags": [
          "Images"
        ],
        "responses": {
          "200": {
            "description": "A JPEG image",
            "content": {
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/image/webp": {
      "get": {
        "summary": "WebP Image",
        "description": "Returns a WebP image.",
        "tags": [
          "Images"
        ],
        "responses": {
          "200": {
            "description": "A WebP image",
            "content": {
              "image/webp": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/image/svg": {
      "get": {
        "summary": "SVG Image",
        "description": "Returns an SVG image.",
        "tags": [
          "Images"
        ],
        "responses": {
          "200": {
            "description": "An SVG image",
            "content": {
              "image/svg+xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/brotli": {
      "get": {
        "summary": "Brotli-encoded Response",
        "description": "Returns Brotli-encoded data.",
        "tags": [
          "Encoding"
        ],
        "responses": {
          "200": {
            "description": "Brotli-encoded response",
            "headers": {
              "Content-Encoding": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "br"
                  ]
                }
              }
            },
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/deflate": {
      "get": {
        "summary": "Deflate-encoded Response",
        "description": "Returns Deflate-encoded data.",
        "tags": [
          "Encoding"
        ],
        "responses": {
          "200": {
            "description": "Deflate-encoded response",
            "headers": {
              "Content-Encoding": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "deflate"
                  ]
                }
              }
            },
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/deny": {
      "get": {
        "summary": "Denied by robots.txt",
        "description": "Returns page denied by robots.txt rules.",
        "tags": [
          "Response inspection"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/encoding/utf8": {
      "get": {
        "summary": "UTF-8 Encoded Response",
        "description": "Returns a UTF-8 encoded body.",
        "tags": [
          "Encoding"
        ],
        "responses": {
          "200": {
            "description": "UTF-8 encoded response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/gzip": {
      "get": {
        "summary": "GZip-encoded Response",
        "description": "Returns GZip-encoded data.",
        "tags": [
          "Encoding"
        ],
        "responses": {
          "200": {
            "description": "GZip-encoded response",
            "headers": {
              "Content-Encoding": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "gzip"
                  ]
                }
              }
            },
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/html": {
      "get": {
        "summary": "HTML Response",
        "description": "Returns a simple HTML document.",
        "tags": [
          "Response formats"
        ],
        "responses": {
          "200": {
            "description": "HTML response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/json": {
      "get": {
        "summary": "JSON Response",
        "description": "Returns a simple JSON document.",
        "tags": [
          "Response formats"
        ],
        "responses": {
          "200": {
            "description": "JSON response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/robots.txt": {
      "get": {
        "summary": "Robots.txt",
        "description": "Returns some robots.txt rules.",
        "tags": [
          "Response inspection"
        ],
        "responses": {
          "200": {
            "description": "Robots.txt content",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/xml": {
      "get": {
        "summary": "XML Response",
        "description": "Returns a simple XML document.",
        "tags": [
          "Response formats"
        ],
        "responses": {
          "200": {
            "description": "XML response",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/absolute-redirect/{n}": {
      "get": {
        "summary": "Absolute redirect",
        "description": "Absolutely 302 Redirects n times.",
        "tags": [
          "Redirects"
        ],
        "parameters": [
          {
            "name": "n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "description": "Number of times to redirect"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/redirect-to": {
      "get": {
        "summary": "Redirect to URL",
        "description": "302/3XX Redirects to the given URL.",
        "tags": [
          "Redirects"
        ],
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "description": "The URL to redirect to"
          },
          {
            "name": "status_code",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "enum": [
                301,
                302,
                303,
                307,
                308
              ]
            },
            "description": "The HTTP status code for the redirect"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "$ref": "#/paths/~1redirect-to/get",
        "tags": [
          "Redirects"
        ]
      },
      "put": {
        "$ref": "#/paths/~1redirect-to/get",
        "tags": [
          "Redirects"
        ]
      },
      "patch": {
        "$ref": "#/paths/~1redirect-to/get",
        "tags": [
          "Redirects"
        ]
      },
      "delete": {
        "$ref": "#/paths/~1redirect-to/get",
        "tags": [
          "Redirects"
        ]
      }
    },
    "/redirect/{n}": {
      "get": {
        "summary": "Relative redirect",
        "description": "302 Redirects n times.",
        "tags": [
          "Redirects"
        ],
        "parameters": [
          {
            "name": "n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "description": "Number of times to redirect"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/relative-redirect/{n}": {
      "get": {
        "summary": "Relative redirect",
        "description": "Relatively 302 Redirects n times.",
        "tags": [
          "Redirects"
        ],
        "parameters": [
          {
            "name": "n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "description": "Number of times to redirect"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/basic-auth/{user}/{passwd}": {
      "get": {
        "summary": "Basic Authentication",
        "description": "Prompts the user for authorization using HTTP Basic Auth.",
        "tags": [
          "Auth"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Username for authentication"
          },
          {
            "name": "passwd",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Password for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authenticated": {
                      "type": "boolean"
                    },
                    "user": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/bearer": {
      "get": {
        "summary": "Bearer Token Authentication",
        "description": "Authenticates using a bearer token provided in the Authorization header.",
        "tags": [
          "Auth"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "Bearer token. Format: 'Bearer {token}'",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authenticated": {
                      "type": "boolean"
                    },
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/hidden-basic-auth/{user}/{passwd}": {
      "get": {
        "summary": "Hidden Basic Authentication",
        "description": "Prompts the user for authorization using HTTP Basic Auth, but does not send a WWW-Authenticate header.",
        "tags": [
          "Auth"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Username for authentication"
          },
          {
            "name": "passwd",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Password for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authenticated": {
                      "type": "boolean"
                    },
                    "user": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found (used instead of 401 to hide the existence of the endpoint)"
          }
        }
      }
    },
    "/digest-auth/{qop}/{user}/{passwd}": {
      "get": {
        "summary": "Digest Authentication",
        "description": "Prompts the user for authorization using HTTP Digest Auth.",
        "tags": [
          "Auth"
        ],
        "parameters": [
          {
            "name": "qop",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "auth",
                "auth-int"
              ]
            },
            "description": "Quality of Protection"
          },
          {
            "name": "user",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Username for authentication"
          },
          {
            "name": "passwd",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Password for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authenticated": {
                      "type": "boolean"
                    },
                    "user": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/digest-auth/{qop}/{user}/{passwd}/{algorithm}": {
      "get": {
        "summary": "Digest Authentication with Algorithm",
        "description": "Prompts the user for authorization using HTTP Digest Auth with a specified algorithm.",
        "tags": [
          "Auth"
        ],
        "parameters": [
          {
            "name": "qop",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "auth",
                "auth-int"
              ]
            },
            "description": "Quality of Protection"
          },
          {
            "name": "user",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Username for authentication"
          },
          {
            "name": "passwd",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Password for authentication"
          },
          {
            "name": "algorithm",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "MD5",
                "SHA-256"
              ]
            },
            "description": "Hashing algorithm to use"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authenticated": {
                      "type": "boolean"
                    },
                    "user": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/digest-auth/{qop}/{user}/{passwd}/{algorithm}/{stale_after}": {
      "get": {
        "summary": "Digest Authentication with Stale After",
        "description": "Prompts the user for authorization using HTTP Digest Auth with a specified algorithm and stale after value.",
        "tags": [
          "Auth"
        ],
        "parameters": [
          {
            "name": "qop",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "auth",
                "auth-int"
              ]
            },
            "description": "Quality of Protection"
          },
          {
            "name": "user",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Username for authentication"
          },
          {
            "name": "passwd",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Password for authentication"
          },
          {
            "name": "algorithm",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "MD5",
                "SHA-256"
              ]
            },
            "description": "Hashing algorithm to use"
          },
          {
            "name": "stale_after",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Number of uses before the nonce becomes stale"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authenticated": {
                      "type": "boolean"
                    },
                    "user": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/cache": {
      "get": {
        "summary": "Cache Control",
        "description": "Returns a 304 if an If-Modified-Since header or If-None-Match is present. Returns the same as a GET otherwise.",
        "tags": [
          "Caching"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "304": {
            "description": "Not Modified"
          }
        }
      }
    },
    "/cache/{value}": {
      "get": {
        "summary": "Cache Control with Max-Age",
        "description": "Sets a Cache-Control header for n seconds.",
        "tags": [
          "Caching"
        ],
        "parameters": [
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Number of seconds for cache control"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "headers": {
              "Cache-Control": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/etag/{etag}": {
      "get": {
        "summary": "ETag",
        "description": "Assumes the resource has the given etag and responds to If-None-Match and If-Match headers appropriately.",
        "tags": [
          "Caching"
        ],
        "parameters": [
          {
            "name": "etag",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ETag value"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "304": {
            "description": "Not Modified"
          },
          "412": {
            "description": "Precondition Failed"
          }
        }
      }
    },
    "/response-headers": {
      "get": {
        "summary": "Response Headers",
        "description": "Returns a set of response headers from the query string.",
        "tags": [
          "Response inspection"
        ],
        "parameters": [
          {
            "name": "freeform",
            "in": "query",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Response Headers",
        "description": "Returns a set of response headers from the query string.",
        "tags": [
          "Response inspection"
        ],
        "parameters": [
          {
            "name": "freeform",
            "in": "query",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/anything": {
      "get": {
        "summary": "Anything",
        "description": "Returns request data",
        "tags": [
          "Anything"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "args": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "headers": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "origin": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/anything/{anything}": {
      "get": {
        "summary": "Anything with path",
        "description": "Returns anything passed in request data, including the path.",
        "tags": [
          "Anything"
        ],
        "parameters": [
          {
            "name": "anything",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Any path segment"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/paths/~1anything/get/responses/200"
          }
        }
      },
      "post": {
        "$ref": "#/paths/~1anything~1{anything}/get",
        "tags": [
          "Anything"
        ]
      },
      "put": {
        "$ref": "#/paths/~1anything~1{anything}/get",
        "tags": [
          "Anything"
        ]
      },
      "patch": {
        "$ref": "#/paths/~1anything~1{anything}/get",
        "tags": [
          "Anything"
        ]
      },
      "delete": {
        "$ref": "#/paths/~1anything~1{anything}/get",
        "tags": [
          "Anything"
        ]
      }
    }
  }
}
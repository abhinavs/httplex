{
  "openapi": "3.0.0",
  "info": {
    "title": "HTTPlex API",
    "version": "1.0.0",
    "description": "A simple HTTP Request & Response Service."
  },
  "tags": [
    {
      "name": "Hello World",
      "description": "Basic hello world endpoint"
    },
    {
      "name": "HTTP Methods",
      "description": "Endpoints demonstrating various HTTP methods"
    },
    {
      "name": "Request inspection",
      "description": "Endpoints for inspecting request details"
    },
    {
      "name": "Status codes",
      "description": "Endpoints returning specific status codes"
    },
    {
      "name": "Dynamic data",
      "description": "Endpoints generating dynamic data"
    },
    {
      "name": "Cookies",
      "description": "Endpoints for cookie manipulation"
    },
    {
      "name": "Images",
      "description": "Endpoints serving various image formats"
    },
    {
      "name": "Redirects",
      "description": "Endpoints demonstrating redirects"
    },
    {
      "name": "Auth",
      "description": "Authentication-related endpoints"
    }
  ],
  "paths": {
    "/hello": {
      "get": {
        "summary": "Home",
        "description": "Returns the homepage.",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "Hello World"
        ]
      }
    },
    "/get": {
      "get": {
        "summary": "GET Request",
        "description": "Returns GET data.",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "HTTP Methods"
        ]
      }
    },
    "/post": {
      "post": {
        "summary": "POST Request",
        "description": "Returns POST data.",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "HTTP Methods"
        ]
      }
    },
    "/put": {
      "put": {
        "summary": "PUT Request",
        "description": "Returns PUT data.",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "HTTP Methods"
        ]
      }
    },
    "/patch": {
      "patch": {
        "summary": "PATCH Request",
        "description": "Returns PATCH data.",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "HTTP Methods"
        ]
      }
    },
    "/delete": {
      "delete": {
        "summary": "DELETE Request",
        "description": "Returns DELETE data.",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "HTTP Methods"
        ]
      }
    },
    "/status/{code}": {
      "get": {
        "summary": "Status Code",
        "description": "Returns a response with the specified status code.",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Response with specified status code"
          }
        },
        "tags": [
          "Status codes"
        ]
      }
    },
    "/ip": {
      "get": {
        "summary": "Client IP",
        "description": "Returns the client's IP address.",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "origin": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Request inspection"
        ]
      }
    },
    "/user-agent": {
      "get": {
        "summary": "User Agent",
        "description": "Returns the user agent.",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user-agent": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Request inspection"
        ]
      }
    },
    "/headers": {
      "get": {
        "summary": "Headers",
        "description": "Returns the request headers.",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Request inspection"
        ]
      }
    },
    "/delay/{n}": {
      "get": {
        "summary": "Delay Response",
        "description": "Delays the response for n seconds.",
        "parameters": [
          {
            "name": "n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delayed response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "delay": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Dynamic data"
        ]
      }
    },
    "/base64/{value}": {
      "get": {
        "summary": "Decode Base64",
        "description": "Decodes base64url-encoded string.",
        "parameters": [
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Decoded data",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "Dynamic data"
        ]
      }
    },
    "/bytes/{n}": {
      "get": {
        "summary": "Random Bytes",
        "description": "Returns n random bytes generated with given seed.",
        "parameters": [
          {
            "name": "n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Random bytes",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "tags": [
          "Dynamic data"
        ]
      }
    },
    "/cookies": {
      "get": {
        "summary": "Get Cookies",
        "description": "Returns cookie data.",
        "responses": {
          "200": {
            "description": "Cookie data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "Cookies"
        ]
      }
    },
    "/cookies/set": {
      "get": {
        "summary": "Set Cookies",
        "description": "Sets one or more simple cookies.",
        "responses": {
          "200": {
            "description": "Cookie confirmation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "Cookies"
        ]
      }
    },
    "/image": {
      "get": {
        "summary": "Get Image",
        "description": "Returns an image based on the Accept header.",
        "responses": {
          "200": {
            "description": "An image",
            "content": {
              "image/png": {},
              "image/jpeg": {},
              "image/webp": {}
            }
          }
        },
        "tags": [
          "Images"
        ]
      }
    },
    "/image/png": {
      "get": {
        "summary": "PNG Image",
        "description": "Returns a PNG image.",
        "responses": {
          "200": {
            "description": "A PNG image",
            "content": {
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "tags": [
          "Images"
        ]
      }
    },
    "/image/jpeg": {
      "get": {
        "summary": "JPEG Image",
        "description": "Returns a JPEG image.",
        "responses": {
          "200": {
            "description": "A JPEG image",
            "content": {
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "tags": [
          "Images"
        ]
      }
    },
    "/image/webp": {
      "get": {
        "summary": "WebP Image",
        "description": "Returns a WebP image.",
        "responses": {
          "200": {
            "description": "A WebP image",
            "content": {
              "image/webp": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "tags": [
          "Images"
        ]
      }
    },
    "/image/svg": {
      "get": {
        "summary": "SVG Image",
        "description": "Returns an SVG image.",
        "responses": {
          "200": {
            "description": "An SVG image",
            "content": {
              "image/svg+xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "Images"
        ]
      }
    },
    "/redirect/{n}": {
      "get": {
        "summary": "Redirect n times",
        "description": "302 Redirects n times.",
        "parameters": [
          {
            "name": "n",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "A redirection.",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "Redirects"
        ]
      }
    },
    "/basic-auth/{user}/{passwd}": {
      "get": {
        "summary": "Basic Authentication",
        "description": "Prompts the user for authorization using HTTP Basic Auth.",
        "tags": [
          "Auth"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Username for authentication"
          },
          {
            "name": "passwd",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Password for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authenticated": {
                      "type": "boolean"
                    },
                    "user": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/bearer": {
      "get": {
        "summary": "Bearer Token Authentication",
        "description": "Authenticates using a bearer token provided in the Authorization header.",
        "tags": [
          "Auth"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "schema": {
              "type": "string"
            },
            "description": "Bearer token. Format: 'Bearer {token}'",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authenticated": {
                      "type": "boolean"
                    },
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/hidden-basic-auth/{user}/{passwd}": {
      "get": {
        "summary": "Hidden Basic Authentication",
        "description": "Prompts the user for authorization using HTTP Basic Auth, but does not send a WWW-Authenticate header.",
        "tags": [
          "Auth"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Username for authentication"
          },
          {
            "name": "passwd",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Password for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authenticated": {
                      "type": "boolean"
                    },
                    "user": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found (used instead of 401 to hide the existence of the endpoint)"
          }
        }
      }
    },
    "/digest-auth/{qop}/{user}/{passwd}": {
      "get": {
        "summary": "Digest Authentication",
        "description": "Prompts the user for authorization using HTTP Digest Auth.",
        "tags": [
          "Auth"
        ],
        "parameters": [
          {
            "name": "qop",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "auth",
                "auth-int"
              ]
            },
            "description": "Quality of Protection"
          },
          {
            "name": "user",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Username for authentication"
          },
          {
            "name": "passwd",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Password for authentication"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authenticated": {
                      "type": "boolean"
                    },
                    "user": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/digest-auth/{qop}/{user}/{passwd}/{algorithm}": {
      "get": {
        "summary": "Digest Authentication with Algorithm",
        "description": "Prompts the user for authorization using HTTP Digest Auth with a specified algorithm.",
        "tags": [
          "Auth"
        ],
        "parameters": [
          {
            "name": "qop",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "auth",
                "auth-int"
              ]
            },
            "description": "Quality of Protection"
          },
          {
            "name": "user",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Username for authentication"
          },
          {
            "name": "passwd",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Password for authentication"
          },
          {
            "name": "algorithm",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "MD5",
                "SHA-256"
              ]
            },
            "description": "Hashing algorithm to use"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authenticated": {
                      "type": "boolean"
                    },
                    "user": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/digest-auth/{qop}/{user}/{passwd}/{algorithm}/{stale_after}": {
      "get": {
        "summary": "Digest Authentication with Stale After",
        "description": "Prompts the user for authorization using HTTP Digest Auth with a specified algorithm and stale after value.",
        "tags": [
          "Auth"
        ],
        "parameters": [
          {
            "name": "qop",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "auth",
                "auth-int"
              ]
            },
            "description": "Quality of Protection"
          },
          {
            "name": "user",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Username for authentication"
          },
          {
            "name": "passwd",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Password for authentication"
          },
          {
            "name": "algorithm",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "MD5",
                "SHA-256"
              ]
            },
            "description": "Hashing algorithm to use"
          },
          {
            "name": "stale_after",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "description": "Number of uses before the nonce becomes stale"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authenticated": {
                      "type": "boolean"
                    },
                    "user": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}